"""
Abstraction for DVC upload sources.
@Piotr StyczyÅ„ski 2021
"""
import inspect
from abc import ABCMeta, abstractmethod
from typing import Callable, Optional
import os


try:
    from StringIO import StringIO  # # for Python 2
except ImportError:
    from io import StringIO  # # for Python 3


class DVCUpload(metaclass=ABCMeta):
    """
    Base class for all DVC uploads.
    The DVCUpload corresponds to an abstract request to upload a file to the upstream.
    """

    dvc_repo: Optional[str] = None
    dvc_path: str  # Path to he GIT repo that is an upstream target
    # Abstract resource that is created by __enter__ and destroyed with __exit__
    # All implementations of DVCUpload can freely choose what this resource is
    # It can be file-like object or other object containing state information
    _resource = None
    instance_context: str

    def __init__(self, dvc_path: str):
        self.dvc_path = dvc_path
        curframe = inspect.currentframe()
        caller = inspect.getouterframes(curframe, 2)[2]
        caller_path = caller.filename.split("/")[-1]
        self.instance_context = f"({caller_path}:{caller.lineno})"

    def __enter__(self):
        """
        Open resource for upload
        """
        if self._resource is None:
            self._resource = self.open()
        return self._resource

    def __exit__(self, type, value, traceback):
        """
        Close resource after upload
        """
        if self._resource is not None:
            self.close(self._resource)
        self._resource = None

    def should_copy_path(self, src_path: str):
        return True

    @abstractmethod
    def describe_source(self) -> str:
        """
        Human-readable message about the upload source
        """
        raise Exception(
            "Operation is not supported: describe_source() invoked on abstract base class - DVCUpload"
        )

    @abstractmethod
    def open(self):
        """
        Custom implementation of the upload behaviour.
        Method shouldn't be called directly, but rather invoked via context (__enter__).
        open() should return an object that has at least read() method.
        """
        raise Exception(
            "Operation is not supported: open() invoked on abstract base class - DVCUpload"
        )

    @abstractmethod
    def close(self, resource):
        """
        Custom implementation of the upload behaviour.
        Method shouldn't be called directly, but rather invoked via context (__exit__).
        close() should take a resource returned by corresponding open() and clean it up.
        """
        raise Exception(
            "Operation is not supported: close() invoked on abstract base class - DVCUpload"
        )


class DVCCallbackUpload(DVCUpload):
    """
    Upload string content generated by a callback function to the DVC
    """

    # Fields to apply Airflow templates
    template_fields = ['dvc_path']

    # Path to the local file
    data_provider: Callable[[], str]

    def __init__(self, dvc_path: str, data_provider: Callable[[], str]):
        super().__init__(dvc_path=dvc_path)
        self.data_provider = data_provider

    def describe_source(self) -> str:
        return f"Callback {self.instance_context}"

    def open(self):
        return StringIO(self.data_provider())

    def close(self, resource):
        # No need to close string io
        pass


class DVCPathUpload(DVCUpload):
    """
    Upload local file to DVC using its system path
    """

    # Fields to apply Airflow templates
    template_fields = ['src', 'dvc_path']

    # Path to the local file
    src: str

    def __init__(self, dvc_path: str, local_path: str):
        super().__init__(dvc_path=dvc_path)
        self.src = local_path

    def should_copy_path(self, src_path: str):
        return os.path.abspath(src_path) != os.path.abspath(self.src)

    def describe_source(self) -> str:
        return f"Path {self.src}"

    def open(self):
        # Open the file
        return open(self.src, "r")

    def close(self, resource):
        # Close the file opened by open()
        resource.close()



class DVCStringUpload(DVCUpload):
    """
    Upload DVC object from a string.
    This is useful when the content of the file is determined at the moment when
    Airflow is building the DAG.
    If you don't want to create unnecessary files, DVCStringUpload allows you to upload
    string content as a DVC file.
    """

    # Fields to apply Airflow templates
    template_fields = ['content', 'dvc_path']

    # Content of the file
    content: str

    def __init__(self, dvc_path: str, content: str):
        super().__init__(dvc_path=dvc_path)
        self.content = content

    def describe_source(self) -> str:
        return f"String {self.instance_context}"

    def open(self):
        # Open string for reading
        return StringIO(self.content)

    def close(self, resource):
        # Closing is not required
        pass